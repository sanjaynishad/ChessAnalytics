/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['stockfish.js']) {
  _$jscoverage['stockfish.js'] = [];
  _$jscoverage['stockfish.js'][71] = 0;
  _$jscoverage['stockfish.js'][76] = 0;
  _$jscoverage['stockfish.js'][77] = 0;
  _$jscoverage['stockfish.js'][79] = 0;
  _$jscoverage['stockfish.js'][80] = 0;
  _$jscoverage['stockfish.js'][81] = 0;
  _$jscoverage['stockfish.js'][82] = 0;
  _$jscoverage['stockfish.js'][83] = 0;
  _$jscoverage['stockfish.js'][84] = 0;
  _$jscoverage['stockfish.js'][87] = 0;
  _$jscoverage['stockfish.js'][88] = 0;
  _$jscoverage['stockfish.js'][90] = 0;
  _$jscoverage['stockfish.js'][91] = 0;
  _$jscoverage['stockfish.js'][92] = 0;
  _$jscoverage['stockfish.js'][93] = 0;
  _$jscoverage['stockfish.js'][94] = 0;
  _$jscoverage['stockfish.js'][96] = 0;
  _$jscoverage['stockfish.js'][97] = 0;
  _$jscoverage['stockfish.js'][98] = 0;
  _$jscoverage['stockfish.js'][99] = 0;
  _$jscoverage['stockfish.js'][100] = 0;
  _$jscoverage['stockfish.js'][102] = 0;
  _$jscoverage['stockfish.js'][103] = 0;
  _$jscoverage['stockfish.js'][104] = 0;
  _$jscoverage['stockfish.js'][105] = 0;
  _$jscoverage['stockfish.js'][106] = 0;
  _$jscoverage['stockfish.js'][107] = 0;
  _$jscoverage['stockfish.js'][108] = 0;
  _$jscoverage['stockfish.js'][109] = 0;
  _$jscoverage['stockfish.js'][110] = 0;
  _$jscoverage['stockfish.js'][111] = 0;
  _$jscoverage['stockfish.js'][112] = 0;
  _$jscoverage['stockfish.js'][113] = 0;
  _$jscoverage['stockfish.js'][115] = 0;
  _$jscoverage['stockfish.js'][116] = 0;
  _$jscoverage['stockfish.js'][117] = 0;
  _$jscoverage['stockfish.js'][118] = 0;
  _$jscoverage['stockfish.js'][119] = 0;
  _$jscoverage['stockfish.js'][121] = 0;
  _$jscoverage['stockfish.js'][123] = 0;
  _$jscoverage['stockfish.js'][124] = 0;
  _$jscoverage['stockfish.js'][126] = 0;
  _$jscoverage['stockfish.js'][127] = 0;
  _$jscoverage['stockfish.js'][129] = 0;
  _$jscoverage['stockfish.js'][130] = 0;
  _$jscoverage['stockfish.js'][132] = 0;
  _$jscoverage['stockfish.js'][134] = 0;
  _$jscoverage['stockfish.js'][136] = 0;
  _$jscoverage['stockfish.js'][137] = 0;
  _$jscoverage['stockfish.js'][138] = 0;
  _$jscoverage['stockfish.js'][141] = 0;
  _$jscoverage['stockfish.js'][142] = 0;
  _$jscoverage['stockfish.js'][144] = 0;
  _$jscoverage['stockfish.js'][145] = 0;
  _$jscoverage['stockfish.js'][149] = 0;
  _$jscoverage['stockfish.js'][150] = 0;
  _$jscoverage['stockfish.js'][151] = 0;
  _$jscoverage['stockfish.js'][152] = 0;
  _$jscoverage['stockfish.js'][155] = 0;
  _$jscoverage['stockfish.js'][156] = 0;
  _$jscoverage['stockfish.js'][157] = 0;
  _$jscoverage['stockfish.js'][158] = 0;
  _$jscoverage['stockfish.js'][162] = 0;
  _$jscoverage['stockfish.js'][163] = 0;
  _$jscoverage['stockfish.js'][164] = 0;
  _$jscoverage['stockfish.js'][166] = 0;
  _$jscoverage['stockfish.js'][167] = 0;
  _$jscoverage['stockfish.js'][168] = 0;
  _$jscoverage['stockfish.js'][171] = 0;
  _$jscoverage['stockfish.js'][172] = 0;
  _$jscoverage['stockfish.js'][174] = 0;
  _$jscoverage['stockfish.js'][178] = 0;
  _$jscoverage['stockfish.js'][179] = 0;
  _$jscoverage['stockfish.js'][180] = 0;
  _$jscoverage['stockfish.js'][183] = 0;
  _$jscoverage['stockfish.js'][184] = 0;
  _$jscoverage['stockfish.js'][187] = 0;
  _$jscoverage['stockfish.js'][188] = 0;
  _$jscoverage['stockfish.js'][189] = 0;
  _$jscoverage['stockfish.js'][191] = 0;
  _$jscoverage['stockfish.js'][194] = 0;
  _$jscoverage['stockfish.js'][197] = 0;
  _$jscoverage['stockfish.js'][198] = 0;
  _$jscoverage['stockfish.js'][199] = 0;
  _$jscoverage['stockfish.js'][200] = 0;
  _$jscoverage['stockfish.js'][203] = 0;
  _$jscoverage['stockfish.js'][204] = 0;
  _$jscoverage['stockfish.js'][206] = 0;
  _$jscoverage['stockfish.js'][207] = 0;
  _$jscoverage['stockfish.js'][209] = 0;
  _$jscoverage['stockfish.js'][211] = 0;
  _$jscoverage['stockfish.js'][212] = 0;
  _$jscoverage['stockfish.js'][215] = 0;
  _$jscoverage['stockfish.js'][216] = 0;
  _$jscoverage['stockfish.js'][217] = 0;
  _$jscoverage['stockfish.js'][220] = 0;
  _$jscoverage['stockfish.js'][222] = 0;
  _$jscoverage['stockfish.js'][223] = 0;
  _$jscoverage['stockfish.js'][224] = 0;
  _$jscoverage['stockfish.js'][225] = 0;
  _$jscoverage['stockfish.js'][229] = 0;
  _$jscoverage['stockfish.js'][232] = 0;
  _$jscoverage['stockfish.js'][233] = 0;
  _$jscoverage['stockfish.js'][235] = 0;
  _$jscoverage['stockfish.js'][238] = 0;
  _$jscoverage['stockfish.js'][239] = 0;
  _$jscoverage['stockfish.js'][240] = 0;
  _$jscoverage['stockfish.js'][241] = 0;
  _$jscoverage['stockfish.js'][243] = 0;
  _$jscoverage['stockfish.js'][245] = 0;
  _$jscoverage['stockfish.js'][252] = 0;
  _$jscoverage['stockfish.js'][253] = 0;
  _$jscoverage['stockfish.js'][255] = 0;
  _$jscoverage['stockfish.js'][256] = 0;
  _$jscoverage['stockfish.js'][258] = 0;
  _$jscoverage['stockfish.js'][259] = 0;
  _$jscoverage['stockfish.js'][260] = 0;
  _$jscoverage['stockfish.js'][261] = 0;
  _$jscoverage['stockfish.js'][266] = 0;
  _$jscoverage['stockfish.js'][267] = 0;
  _$jscoverage['stockfish.js'][268] = 0;
  _$jscoverage['stockfish.js'][269] = 0;
  _$jscoverage['stockfish.js'][270] = 0;
  _$jscoverage['stockfish.js'][271] = 0;
  _$jscoverage['stockfish.js'][273] = 0;
  _$jscoverage['stockfish.js'][276] = 0;
  _$jscoverage['stockfish.js'][279] = 0;
  _$jscoverage['stockfish.js'][280] = 0;
  _$jscoverage['stockfish.js'][281] = 0;
  _$jscoverage['stockfish.js'][282] = 0;
  _$jscoverage['stockfish.js'][285] = 0;
  _$jscoverage['stockfish.js'][286] = 0;
  _$jscoverage['stockfish.js'][287] = 0;
  _$jscoverage['stockfish.js'][290] = 0;
  _$jscoverage['stockfish.js'][292] = 0;
}
_$jscoverage['stockfish.js'][71]++;
var spawn = require("child_process").spawn, util = require("util"), winston = require("winston"), emitter = require("events").EventEmitter;
_$jscoverage['stockfish.js'][76]++;
var WHITE = "white";
_$jscoverage['stockfish.js'][77]++;
var BLACK = "black";
_$jscoverage['stockfish.js'][79]++;
var COMMANDS = {};
_$jscoverage['stockfish.js'][80]++;
COMMANDS.analyse_on = "setoption name UCI_AnalyseMode value true\n";
_$jscoverage['stockfish.js'][81]++;
COMMANDS.new_game = "ucinewgame\n";
_$jscoverage['stockfish.js'][82]++;
COMMANDS.check_ready = "isready\n";
_$jscoverage['stockfish.js'][83]++;
COMMANDS.start_new = "position startpos moves %s\n";
_$jscoverage['stockfish.js'][84]++;
COMMANDS.position = "position moves %s\n";
_$jscoverage['stockfish.js'][87]++;
COMMANDS.ponder = "go depth %s\n";
_$jscoverage['stockfish.js'][88]++;
COMMANDS.searchmoves = "go depth %s searchmoves %s\n";
_$jscoverage['stockfish.js'][90]++;
var RESPONSES = {};
_$jscoverage['stockfish.js'][91]++;
RESPONSES.ctor = "Stockfish";
_$jscoverage['stockfish.js'][92]++;
RESPONSES.ready = "readyok";
_$jscoverage['stockfish.js'][93]++;
RESPONSES.bestmove = "bestmove";
_$jscoverage['stockfish.js'][94]++;
RESPONSES.info = "info";
_$jscoverage['stockfish.js'][96]++;
var response_mapping = {};
_$jscoverage['stockfish.js'][97]++;
response_mapping[RESPONSES.ctor] = "ctor";
_$jscoverage['stockfish.js'][98]++;
response_mapping[RESPONSES.ready] = "ready";
_$jscoverage['stockfish.js'][99]++;
response_mapping[RESPONSES.bestmove] = "bestmove";
_$jscoverage['stockfish.js'][100]++;
response_mapping[RESPONSES.info] = "info";
_$jscoverage['stockfish.js'][102]++;
var info_mapping = {};
_$jscoverage['stockfish.js'][103]++;
info_mapping.depth = "depth";
_$jscoverage['stockfish.js'][104]++;
info_mapping.score = "score";
_$jscoverage['stockfish.js'][105]++;
info_mapping.nodes = "nodes";
_$jscoverage['stockfish.js'][106]++;
info_mapping.nps = "nps";
_$jscoverage['stockfish.js'][107]++;
info_mapping.time = "time";
_$jscoverage['stockfish.js'][108]++;
info_mapping.multipv = "multipv";
_$jscoverage['stockfish.js'][109]++;
info_mapping.currmovenumber = "currmovenumber";
_$jscoverage['stockfish.js'][110]++;
info_mapping.currmove = "currmove";
_$jscoverage['stockfish.js'][111]++;
info_mapping.seldepth = "seldepth";
_$jscoverage['stockfish.js'][112]++;
info_mapping.cp = "centipawns";
_$jscoverage['stockfish.js'][113]++;
info_mapping.pv = "bestline";
_$jscoverage['stockfish.js'][115]++;
var triggers = {};
_$jscoverage['stockfish.js'][116]++;
triggers.compare = "compare";
_$jscoverage['stockfish.js'][117]++;
triggers.bestmove = "bestmove";
_$jscoverage['stockfish.js'][118]++;
triggers.ready = "ready";
_$jscoverage['stockfish.js'][119]++;
triggers.game_analysed = "game_analysed";
_$jscoverage['stockfish.js'][121]++;
var DEFAULT_DEPTH = 15;
_$jscoverage['stockfish.js'][123]++;
var Stockfish = module.exports.Stockfish = (function (depth) {
  _$jscoverage['stockfish.js'][124]++;
  var self = this, i, split_data;
  _$jscoverage['stockfish.js'][126]++;
  if (! depth) {
    _$jscoverage['stockfish.js'][126]++;
    self.depth = DEFAULT_DEPTH;
  }
  else {
    _$jscoverage['stockfish.js'][127]++;
    self.depth = depth;
  }
  _$jscoverage['stockfish.js'][129]++;
  self.emitter = new emitter();
  _$jscoverage['stockfish.js'][130]++;
  self.spawn = spawn("stockfish", []);
  _$jscoverage['stockfish.js'][132]++;
  self.spawn.stdout.on("data", (function (data) {
  _$jscoverage['stockfish.js'][134]++;
  self.emitter.emit("data", data.toString());
  _$jscoverage['stockfish.js'][136]++;
  split_data = data.toString().split("\n");
  _$jscoverage['stockfish.js'][137]++;
  for (i = 0; i < split_data.length; i++) {
    _$jscoverage['stockfish.js'][138]++;
    self.parse_response(split_data[i].split(" "));
}
}));
  _$jscoverage['stockfish.js'][141]++;
  self.spawn.stderr.on("data", (function (data) {
  _$jscoverage['stockfish.js'][142]++;
  winston.warn(data.toString());
}));
  _$jscoverage['stockfish.js'][144]++;
  self.spawn.on("exit", (function (code) {
  _$jscoverage['stockfish.js'][145]++;
  winston.info("Stockfish exited!");
}));
});
_$jscoverage['stockfish.js'][149]++;
Stockfish.prototype.ctor = (function () {
  _$jscoverage['stockfish.js'][150]++;
  this.spawn.stdin.write(COMMANDS.analyse_on);
  _$jscoverage['stockfish.js'][151]++;
  this.spawn.stdin.write(COMMANDS.new_game);
  _$jscoverage['stockfish.js'][152]++;
  this.spawn.stdin.write(COMMANDS.check_ready);
});
_$jscoverage['stockfish.js'][155]++;
Stockfish.prototype.parse_response = (function (response) {
  _$jscoverage['stockfish.js'][156]++;
  var command = response.splice(0, 1)[0];
  _$jscoverage['stockfish.js'][157]++;
  if (response_mapping[command]) {
    _$jscoverage['stockfish.js'][158]++;
    this[response_mapping[command]](response);
  }
});
_$jscoverage['stockfish.js'][162]++;
Stockfish.prototype.parse_info = (function (i, response, kv, key) {
  _$jscoverage['stockfish.js'][163]++;
  if (info_mapping[response[i]]) {
    _$jscoverage['stockfish.js'][164]++;
    key = info_mapping[response[i]];
  }
  else {
    _$jscoverage['stockfish.js'][166]++;
    if (response[i] && key) {
      _$jscoverage['stockfish.js'][167]++;
      if (! kv[key]) {
        _$jscoverage['stockfish.js'][167]++;
        kv[key] = [];
      }
      _$jscoverage['stockfish.js'][168]++;
      kv[key].push(response[i]);
    }
  }
  _$jscoverage['stockfish.js'][171]++;
  if (i >= response.length) {
    _$jscoverage['stockfish.js'][172]++;
    return kv;
  }
  else {
    _$jscoverage['stockfish.js'][174]++;
    return this.parse_info(i + 1, response, kv, key);
  }
});
_$jscoverage['stockfish.js'][178]++;
Stockfish.prototype.info = (function (response) {
  _$jscoverage['stockfish.js'][179]++;
  var kv;
  _$jscoverage['stockfish.js'][180]++;
  this.stored_info = this.parse_info(0, response, {});
});
_$jscoverage['stockfish.js'][183]++;
Stockfish.prototype.ready = (function () {
  _$jscoverage['stockfish.js'][184]++;
  this.emitter.emit(triggers.ready);
});
_$jscoverage['stockfish.js'][187]++;
Stockfish.prototype.bestmove = (function (response) {
  _$jscoverage['stockfish.js'][188]++;
  try {
    _$jscoverage['stockfish.js'][189]++;
    this.strength = this.stored_info.centipawns[this.stored_info.centipawns.length - 1];
  }
  catch (err) {
    _$jscoverage['stockfish.js'][191]++;
    this.strength = 0;
  }
  _$jscoverage['stockfish.js'][194]++;
  this.emitter.emit(triggers.bestmove, {bestmove: response, strength: this.strength, info: this.stored_info});
});
_$jscoverage['stockfish.js'][197]++;
Stockfish.prototype.determine_color_move = (function (position) {
  _$jscoverage['stockfish.js'][198]++;
  if (! position) {
    _$jscoverage['stockfish.js'][198]++;
    return WHITE;
  }
  _$jscoverage['stockfish.js'][199]++;
  if (position.split(" ").length % 2 === 0) {
    _$jscoverage['stockfish.js'][199]++;
    return WHITE;
  }
  _$jscoverage['stockfish.js'][200]++;
  return BLACK;
});
_$jscoverage['stockfish.js'][203]++;
Stockfish.prototype.get_move_data = (function (position_cmd, move_cmd, cb) {
  _$jscoverage['stockfish.js'][204]++;
  var self = this;
  _$jscoverage['stockfish.js'][206]++;
  winston.debug(position_cmd);
  _$jscoverage['stockfish.js'][207]++;
  winston.debug(move_cmd);
  _$jscoverage['stockfish.js'][209]++;
  self.emitter.once(triggers.bestmove, cb);
  _$jscoverage['stockfish.js'][211]++;
  self.spawn.stdin.write(position_cmd);
  _$jscoverage['stockfish.js'][212]++;
  self.spawn.stdin.write(move_cmd);
});
_$jscoverage['stockfish.js'][215]++;
Stockfish.prototype.compare = (function (position, move) {
  _$jscoverage['stockfish.js'][216]++;
  var self = this, actual_move, bestmove_data, difference, color, move_not_found = false;
  _$jscoverage['stockfish.js'][217]++;
  color = self.determine_color_move(position);
  _$jscoverage['stockfish.js'][220]++;
  self.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.searchmoves, self.depth, move), (function (actual_move_data) {
  _$jscoverage['stockfish.js'][222]++;
  if (actual_move_data.bestmove[0] === "(none)") {
    _$jscoverage['stockfish.js'][223]++;
    actual_move_data.bestmove[0] = move;
    _$jscoverage['stockfish.js'][224]++;
    actual_move_data.strength = "?";
    _$jscoverage['stockfish.js'][225]++;
    move_not_found = true;
  }
  _$jscoverage['stockfish.js'][229]++;
  self.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.ponder, self.depth), (function (bestmove_data) {
  _$jscoverage['stockfish.js'][232]++;
  if (move === bestmove_data.bestmove[0]) {
    _$jscoverage['stockfish.js'][233]++;
    difference = 0;
  }
  else {
    _$jscoverage['stockfish.js'][235]++;
    difference = Number(bestmove_data.strength) - Number(actual_move_data.strength);
  }
  _$jscoverage['stockfish.js'][238]++;
  if (actual_move_data.strength === "?") {
    _$jscoverage['stockfish.js'][239]++;
    percent = "?";
  }
  else {
    _$jscoverage['stockfish.js'][240]++;
    if (Number(bestmove_data.strength) === 0) {
      _$jscoverage['stockfish.js'][241]++;
      percent = 0;
    }
    else {
      _$jscoverage['stockfish.js'][243]++;
      percent = difference / Number(bestmove_data.strength);
    }
  }
  _$jscoverage['stockfish.js'][245]++;
  self.emitter.emit(triggers.compare, {difference: difference, percent: percent, actual_move: actual_move_data, bestmove: bestmove_data});
}));
}));
});
_$jscoverage['stockfish.js'][252]++;
Stockfish.prototype.analyse_turn = (function (i, moves) {
  _$jscoverage['stockfish.js'][253]++;
  var self = this;
  _$jscoverage['stockfish.js'][255]++;
  if (i >= moves.length + 1) {
    _$jscoverage['stockfish.js'][256]++;
    self.emitter.emit(triggers.game_analysed, {game: self.game});
  }
  else {
    _$jscoverage['stockfish.js'][258]++;
    self.compare(moves.slice(0, i).join(" "), moves.slice(i, i + 1).join(" "));
    _$jscoverage['stockfish.js'][259]++;
    self.emitter.once(triggers.compare, (function (data) {
  _$jscoverage['stockfish.js'][260]++;
  self.game.turns.push(data);
  _$jscoverage['stockfish.js'][261]++;
  self.analyse_turn(i + 1, moves);
}));
  }
});
_$jscoverage['stockfish.js'][266]++;
Stockfish.prototype.parse_moves = (function (moves) {
  _$jscoverage['stockfish.js'][267]++;
  var i, ret = [];
  _$jscoverage['stockfish.js'][268]++;
  for (i = 0; i < moves.length; i++) {
    _$jscoverage['stockfish.js'][269]++;
    if (moves[i][moves[i].length - 1] !== "." && moves[i][1] !== "-" && moves[i][3] !== "-") {
      _$jscoverage['stockfish.js'][270]++;
      if (moves[i][moves[i].length - 1] === "+" || moves[i][moves[i].length - 1] === "#") {
        _$jscoverage['stockfish.js'][271]++;
        moves[i] = moves[i].slice(0, moves[i].length - 1);
      }
      _$jscoverage['stockfish.js'][273]++;
      ret.push(moves[i]);
    }
}
  _$jscoverage['stockfish.js'][276]++;
  return ret;
});
_$jscoverage['stockfish.js'][279]++;
Stockfish.prototype.analyse_game = (function (game) {
  _$jscoverage['stockfish.js'][280]++;
  var moves = this.parse_moves(game.split(" "));
  _$jscoverage['stockfish.js'][281]++;
  this.game = {turns: []};
  _$jscoverage['stockfish.js'][282]++;
  this.analyse_turn(0, moves);
});
_$jscoverage['stockfish.js'][285]++;
Stockfish.prototype.position = (function (position) {
  _$jscoverage['stockfish.js'][286]++;
  this.spawn.stdin.write(util.format(COMMANDS.position, position));
  _$jscoverage['stockfish.js'][287]++;
  this.spawn.stdin.write(util.format(COMMANDS.ponder, self.depth));
});
_$jscoverage['stockfish.js'][290]++;
Stockfish.prototype.end = (function () {
  _$jscoverage['stockfish.js'][292]++;
  this.spawn.kill();
});
_$jscoverage['stockfish.js'].source = ["/* Stockfish","","This driver requires uci chess engine to be installed and in the path.","","Stockfish: http://www.stockfishchess.com/","","","Example usage:","//create a new stockfish object","var stockfish = new require('./path/to/lib/stockfish').Stockfish();","Where 'stockfish' is the shell command of the uci engine","","//listen for when a game has been analysed","stockfish.emitter.once('game_analysed', function(data){","","\t//spit out the data to your log","\tconsole.log(data.game.turns);","","\t//shut the connection down","\tstockfish.end()","});","","//start the analysis","stockfish.analyse_game('1. e2e4 c7c5 2. c2c4 b8c6 3. d2d3 e7e5 4. f1e2 g8f6 5. b1c3 d7d6 6. f2f4 e5f4 7. c1f4 f8e7 8. g1f3 e8g8 9. e1g1 c8g4 10. h2h3 g4h5 11. c3d5 h5f3 12. e2f3 c6d4 13. f4e3 d4f3+ 14. f1f3 f6d5 15. c4d5 e7g5 16. d1d2 g5e3+ 17. d2e3 f7f6 18. f3g3 d8e7 19. a1f1 e7e5 20. b2b3 a7a5 21. f1f5 e5a1+ 22. g1h2 b7b6 23. f5h5 g7g6 24. e3h6 a8a7 25. h6f4 a1a2 26. f4d6 a2b3 27. d3d4 b3b4 28. d4c5 b4c5 29. d6e6+ f8f7 30. e4e5 a7e7 31. e6c6 c5c6 32. d5c6 e7e6 33. e5f6 e6c6 34. h5d5 c6f6 35. g3e3 g8g7 36. d5d8 b6b5 37. e3e8 b5b4 38. g2g4 f6f2+ 39. h2g3 f2f3+ 40. g3h4 a5a4 41. g4g5 f7f4');","","","","Public Attributes:","\tstockfish.emitter","\t\tEvent Emitter for stockfish events","","Triggers:","\t'compare'","\t\tWhen: compare results are ready","\t\tData: ","\t\t\tdifference: decimal difference between the best move and the actual move","\t\t\tpercent: percent difference between the best move and the actual move","\t\t\tactual_move: data about the actual move","\t\t\tbestmove: data about the best move","","\t'bestmove'","\t\tWhen: bestmove results are ready","\t\tData:","\t\t\tbestmove: data about the best move","\t\t\tstrength: cp of the best move","\t\t\tinfo: info returned while retrieving the best move","","\t'ready'","\t\tWhen: checkready result is ready","\t\tData: null","","\t'game_analysed'","\t\tWhen: a game has been analysed","\t\tData: ","\t\t\tturns: a list of comparison data contracts","","","Public Methods:","\tanalyse_game(moves):","\t\tCalled with the move format of the game in long algebraic notation","\t\tExample: stockfish.analyse_game('1. e2e4 c7c5 2. c2c4 b8c6')","\t\tTriggers: 'game_analysed'","","\tcompare(position, move): ","\t\tCalled with the starting position and the next move","\t\tExample: stockfish.compare('e2e4', 'c7c5')","\t\tTriggers: 'compare'","","*/","","var spawn = require('child_process').spawn,","\tutil = require('util'),","\twinston = require('winston'),","\temitter = require('events').EventEmitter;","","var WHITE = 'white';","var BLACK = 'black';","","var COMMANDS = {};","COMMANDS.analyse_on = 'setoption name UCI_AnalyseMode value true\\n';","COMMANDS.new_game = 'ucinewgame\\n'","COMMANDS.check_ready = 'isready\\n';","COMMANDS.start_new = 'position startpos moves %s\\n';","COMMANDS.position = 'position moves %s\\n';","//COMMANDS.ponder = 'go \\n';","//COMMANDS.searchmoves = 'go searchmoves %s\\n';","COMMANDS.ponder = 'go depth %s\\n';","COMMANDS.searchmoves = 'go depth %s searchmoves %s\\n';","","var RESPONSES = {};","RESPONSES.ctor = 'Stockfish';","RESPONSES.ready = 'readyok';","RESPONSES.bestmove = 'bestmove';","RESPONSES.info = 'info';","","var response_mapping={};","response_mapping[RESPONSES.ctor] = 'ctor';","response_mapping[RESPONSES.ready] = 'ready';","response_mapping[RESPONSES.bestmove] = 'bestmove';","response_mapping[RESPONSES.info] = 'info';","","var info_mapping={};","info_mapping.depth = 'depth';","info_mapping.score = 'score';","info_mapping.nodes = 'nodes';","info_mapping.nps = 'nps';","info_mapping.time = 'time';","info_mapping.multipv = 'multipv';","info_mapping.currmovenumber = 'currmovenumber';","info_mapping.currmove = 'currmove';","info_mapping.seldepth = 'seldepth';","info_mapping.cp = 'centipawns';","info_mapping.pv = 'bestline';","","var triggers={};","triggers.compare = 'compare';","triggers.bestmove = 'bestmove';","triggers.ready = 'ready';","triggers.game_analysed = 'game_analysed';","","var DEFAULT_DEPTH = 15;","","var Stockfish = module.exports.Stockfish = function(depth){","\tvar self = this, i, split_data;","","\tif(!depth){ self.depth = DEFAULT_DEPTH; }","\telse{ self.depth = depth; }","","\tself.emitter = new emitter();","\tself.spawn = spawn('stockfish',[]);","","\tself.spawn.stdout.on('data', function(data){","\t\t","\t\tself.emitter.emit('data', data.toString());","","\t\tsplit_data = data.toString().split('\\n');","\t\tfor(i=0; i&lt;split_data.length; i++){","\t\t\tself.parse_response(split_data[i].split(' '));","\t\t}","\t});","\tself.spawn.stderr.on('data', function(data){","\t\twinston.warn(data.toString());","\t});","\tself.spawn.on('exit', function (code) {","\t\twinston.info('Stockfish exited!');","\t});","};","","Stockfish.prototype.ctor = function(){","\tthis.spawn.stdin.write(COMMANDS.analyse_on);","\tthis.spawn.stdin.write(COMMANDS.new_game);","\tthis.spawn.stdin.write(COMMANDS.check_ready);","};","","Stockfish.prototype.parse_response = function(response){","\tvar command = response.splice(0,1)[0];","\tif(response_mapping[command]){","\t\tthis[response_mapping[command]](response);","\t}","};","","Stockfish.prototype.parse_info = function(i, response, kv, key){","\tif(info_mapping[response[i]]){","\t\tkey = info_mapping[response[i]];","\t}","\telse if(response[i] &amp;&amp; key){","\t\tif(!kv[key]){ kv[key] = []; }","\t\tkv[key].push(response[i]);","\t}","","\tif(i &gt;= response.length){","\t\treturn kv;","\t}else{","\t\treturn this.parse_info(i+1, response, kv, key);","\t}","};","","Stockfish.prototype.info = function(response){","\tvar kv;","\tthis.stored_info = this.parse_info(0, response, {});","};","","Stockfish.prototype.ready = function(){","\tthis.emitter.emit(triggers.ready);","};","","Stockfish.prototype.bestmove = function(response){","\ttry{","\t\tthis.strength = this.stored_info.centipawns[this.stored_info.centipawns.length-1];","\t}catch(err){","\t\tthis.strength = 0;","\t}","\t","\tthis.emitter.emit(triggers.bestmove, { bestmove: response, strength: this.strength, info: this.stored_info });","};","","Stockfish.prototype.determine_color_move = function(position){","\tif(!position){ return WHITE; }","\tif(position.split(' ').length % 2 === 0) { return WHITE; }","\treturn BLACK;","};","","Stockfish.prototype.get_move_data = function(position_cmd, move_cmd, cb){","\tvar self = this;","","\twinston.debug(position_cmd);","\twinston.debug(move_cmd);","","\tself.emitter.once(triggers.bestmove, cb);","","\tself.spawn.stdin.write(position_cmd);","\tself.spawn.stdin.write(move_cmd);","};","","Stockfish.prototype.compare = function(position, move){","\tvar self = this, actual_move, bestmove_data, difference, color, move_not_found=false;","\tcolor = self.determine_color_move(position);","\t","\t//self.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.searchmoves, move)","\tself.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.searchmoves, self.depth, move)","\t, function(actual_move_data){","\t\tif(actual_move_data.bestmove[0] === '(none)'){","\t\t\tactual_move_data.bestmove[0] = move;","\t\t\tactual_move_data.strength = '?';","\t\t\tmove_not_found = true;","\t\t}","\t\t","\t\t//self.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.ponder)","\t\tself.get_move_data(util.format(COMMANDS.start_new, position), util.format(COMMANDS.ponder, self.depth)","\t\t, function(bestmove_data){","","\t\t\tif(move === bestmove_data.bestmove[0]){","\t\t\t\tdifference = 0;","\t\t\t}else{","\t\t\t\tdifference = Number(bestmove_data.strength) - Number(actual_move_data.strength);","\t\t\t}","","\t\t\tif(actual_move_data.strength === '?'){","\t\t\t\tpercent = '?';","\t\t\t}else if(Number(bestmove_data.strength) === 0){","\t\t\t\tpercent = 0;","\t\t\t}else{","\t\t\t\tpercent = difference / Number(bestmove_data.strength);","\t\t\t}","\t\t\tself.emitter.emit(triggers.compare, { difference: difference, percent: percent, actual_move: actual_move_data, bestmove: bestmove_data});","","\t\t});","","\t});","};","","Stockfish.prototype.analyse_turn = function(i, moves){","\tvar self = this;","","\tif(i &gt;= moves.length+1){","\t\tself.emitter.emit(triggers.game_analysed, { game: self.game } );","\t}else{","\t\tself.compare(moves.slice(0, i).join(' '), moves.slice(i, i+1).join(' '))","\t\tself.emitter.once(triggers.compare, function(data){","\t\t\tself.game.turns.push(data);","\t\t\tself.analyse_turn(i+1, moves);","\t\t});","\t}","};","","Stockfish.prototype.parse_moves = function(moves){","\tvar i, ret=[];","\tfor(i=0; i&lt;moves.length; i++){","\t\tif(moves[i][moves[i].length-1] !== '.' &amp;&amp; moves[i][1] !== '-' &amp;&amp; moves[i][3] !== '-'){","\t\t\tif(moves[i][moves[i].length-1] === '+' || moves[i][moves[i].length-1] === '#'){","\t\t\t\tmoves[i] = moves[i].slice(0, moves[i].length-1);","\t\t\t}","\t\t\tret.push(moves[i]);","\t\t}","\t}","\treturn ret;","};","","Stockfish.prototype.analyse_game = function(game){","\tvar moves = this.parse_moves(game.split(' '));","\tthis.game = { turns: []};","\tthis.analyse_turn(0, moves);","};","","Stockfish.prototype.position = function(position){","\tthis.spawn.stdin.write(util.format(COMMANDS.position, position));","\tthis.spawn.stdin.write(util.format(COMMANDS.ponder, self.depth));","};","","Stockfish.prototype.end = function(){","\t/* Feel like I shouldn't be using kill... */","\tthis.spawn.kill();","};"];
