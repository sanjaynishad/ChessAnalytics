/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['batch-queuer.js']) {
  _$jscoverage['batch-queuer.js'] = [];
  _$jscoverage['batch-queuer.js'][33] = 0;
  _$jscoverage['batch-queuer.js'][42] = 0;
  _$jscoverage['batch-queuer.js'][43] = 0;
  _$jscoverage['batch-queuer.js'][46] = 0;
  _$jscoverage['batch-queuer.js'][47] = 0;
  _$jscoverage['batch-queuer.js'][49] = 0;
  _$jscoverage['batch-queuer.js'][50] = 0;
  _$jscoverage['batch-queuer.js'][51] = 0;
  _$jscoverage['batch-queuer.js'][54] = 0;
  _$jscoverage['batch-queuer.js'][55] = 0;
  _$jscoverage['batch-queuer.js'][57] = 0;
  _$jscoverage['batch-queuer.js'][58] = 0;
  _$jscoverage['batch-queuer.js'][61] = 0;
  _$jscoverage['batch-queuer.js'][69] = 0;
  _$jscoverage['batch-queuer.js'][73] = 0;
  _$jscoverage['batch-queuer.js'][74] = 0;
  _$jscoverage['batch-queuer.js'][76] = 0;
  _$jscoverage['batch-queuer.js'][77] = 0;
  _$jscoverage['batch-queuer.js'][78] = 0;
  _$jscoverage['batch-queuer.js'][79] = 0;
  _$jscoverage['batch-queuer.js'][81] = 0;
}
_$jscoverage['batch-queuer.js'][33]++;
var util = require("util"), winston = require("winston"), emitter = require("events").EventEmitter, fs = require("fs"), queue_manager = require("./queue-manager").queue_manager, models = require("./../models"), PGNConverter = require("./pgn-converter").PGNConverter;
_$jscoverage['batch-queuer.js'][42]++;
var BatchQueuer = module.exports.BatchQueuer = (function () {
  _$jscoverage['batch-queuer.js'][43]++;
  this.emitter = new emitter();
});
_$jscoverage['batch-queuer.js'][46]++;
BatchQueuer.prototype.queue_file_helper = (function (i, files, path, user_id, _private) {
  _$jscoverage['batch-queuer.js'][47]++;
  var self = this;
  _$jscoverage['batch-queuer.js'][49]++;
  if (i >= files.length) {
    _$jscoverage['batch-queuer.js'][50]++;
    this.emitter.emit("all_added_to_manager");
    _$jscoverage['batch-queuer.js'][51]++;
    return;
  }
  _$jscoverage['batch-queuer.js'][54]++;
  if (files[i].slice(-4) === ".pgn") {
    _$jscoverage['batch-queuer.js'][55]++;
    fs.readFile(util.format("%s/%s", path, files[i]), (function (err, buffer) {
  _$jscoverage['batch-queuer.js'][57]++;
  queue_manager.emitter.once("done", (function () {
  _$jscoverage['batch-queuer.js'][58]++;
  self.queue_file_helper(i + 1, files, path, user_id, _private);
}));
  _$jscoverage['batch-queuer.js'][61]++;
  queue_manager.add_to_queue({_private: _private, user_id: user_id, pgn: buffer.toString()});
}));
  }
  else {
    _$jscoverage['batch-queuer.js'][69]++;
    self.queue_file_helper(i + 1, files, path, user_id, _private);
  }
});
_$jscoverage['batch-queuer.js'][73]++;
BatchQueuer.prototype.queue_folder = (function (user_id, _private, path) {
  _$jscoverage['batch-queuer.js'][74]++;
  var self = this;
  _$jscoverage['batch-queuer.js'][76]++;
  fs.readdir(path, (function (err, files) {
  _$jscoverage['batch-queuer.js'][77]++;
  if (err) {
    _$jscoverage['batch-queuer.js'][78]++;
    self.emitter.emit("_error", {display: "Failed to read the folder."});
    _$jscoverage['batch-queuer.js'][79]++;
    return;
  }
  _$jscoverage['batch-queuer.js'][81]++;
  self.queue_file_helper(0, files, path, user_id, _private);
}));
});
_$jscoverage['batch-queuer.js'].source = ["/* Batch Queuer","","Batch Queuer is a tool to take a folder full of pgns and push each into the queue and then delete them.","","Example usage:","","var batch_queuer = new require('./../lib/batch-queuer').BatchQueuer();","batch_queuer.queue_folder(user_id, './path/to/pgnfolder/')","","","Triggers:","\t_error","\t\tWhen: an error occurs","\t\tData: ","\t\t\tdisplay","\t\t\ttrace","\tall_added_to_manager","\t\tWhen: all the files in the folder being queued have finished","\t\tData: null","","Public Attributes:","\tbatch_queuer.emitter","\t\tEvent Emitter for batch queuer events","","Public Methods:","\tqueue_folder(user_id, folder):","\t\tCalled with the absolute path to the folder","\t\tExample: batch_queuer.queue_folder(user_id, './path/to/pgnfolder/')","\t\tTriggers: 'all_added_to_manager'","*/","","","var util = require('util'),","\twinston = require('winston'),","\temitter = require('events').EventEmitter,","\tfs = require('fs'),","","\tqueue_manager = require('./queue-manager').queue_manager,","\tmodels = require('./../models'),","\tPGNConverter = require('./pgn-converter').PGNConverter;","","var BatchQueuer = module.exports.BatchQueuer = function(){","\tthis.emitter = new emitter();","};","","BatchQueuer.prototype.queue_file_helper = function(i, files, path, user_id, _private){","\tvar self = this;","\t","\tif(i &gt;= files.length){","\t\tthis.emitter.emit('all_added_to_manager');","\t\treturn;","\t}","","\tif(files[i].slice(-4) === '.pgn'){","\t\tfs.readFile(util.format('%s/%s', path, files[i]), function(err, buffer){","","\t\t\tqueue_manager.emitter.once('done', function(){","\t\t\t\tself.queue_file_helper(i+1, files, path, user_id, _private);","\t\t\t});","","\t\t\tqueue_manager.add_to_queue({","\t\t\t\t_private: _private,","\t\t\t\tuser_id: user_id,","\t\t\t\tpgn: buffer.toString()","\t\t\t});","","\t\t});","\t}else{","\t\tself.queue_file_helper(i+1, files, path, user_id, _private);","\t}","};","","BatchQueuer.prototype.queue_folder = function(user_id, _private, path){","\tvar self = this;","","\tfs.readdir(path, function(err, files){","\t\tif(err){","\t\t\tself.emitter.emit('_error', {display: 'Failed to read the folder.'});","\t\t\treturn;","\t\t}","\t\tself.queue_file_helper(0, files, path, user_id, _private);","\t});","};"];
