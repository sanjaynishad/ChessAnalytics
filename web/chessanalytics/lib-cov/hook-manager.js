/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['hook-manager.js']) {
  _$jscoverage['hook-manager.js'] = [];
  _$jscoverage['hook-manager.js'][1] = 0;
  _$jscoverage['hook-manager.js'][6] = 0;
  _$jscoverage['hook-manager.js'][7] = 0;
  _$jscoverage['hook-manager.js'][10] = 0;
  _$jscoverage['hook-manager.js'][11] = 0;
  _$jscoverage['hook-manager.js'][14] = 0;
  _$jscoverage['hook-manager.js'][15] = 0;
  _$jscoverage['hook-manager.js'][16] = 0;
  _$jscoverage['hook-manager.js'][18] = 0;
  _$jscoverage['hook-manager.js'][19] = 0;
  _$jscoverage['hook-manager.js'][21] = 0;
  _$jscoverage['hook-manager.js'][23] = 0;
  _$jscoverage['hook-manager.js'][27] = 0;
  _$jscoverage['hook-manager.js'][28] = 0;
  _$jscoverage['hook-manager.js'][30] = 0;
  _$jscoverage['hook-manager.js'][31] = 0;
  _$jscoverage['hook-manager.js'][32] = 0;
  _$jscoverage['hook-manager.js'][36] = 0;
}
_$jscoverage['hook-manager.js'][1]++;
var winston = require("winston"), QueueHook = require("./hooks/queue-hook");
_$jscoverage['hook-manager.js'][6]++;
var Hooks = {};
_$jscoverage['hook-manager.js'][7]++;
Hooks.queue = new QueueHook();
_$jscoverage['hook-manager.js'][10]++;
var HookManager = (function () {
  _$jscoverage['hook-manager.js'][11]++;
  this.clients = {};
});
_$jscoverage['hook-manager.js'][14]++;
HookManager.prototype.io_hook = (function (hook, client) {
  _$jscoverage['hook-manager.js'][15]++;
  try {
    _$jscoverage['hook-manager.js'][16]++;
    Hooks[hook].add_client(client);
    _$jscoverage['hook-manager.js'][18]++;
    if (! this.clients[client.id]) {
      _$jscoverage['hook-manager.js'][19]++;
      this.clients[client.id] = [];
    }
    _$jscoverage['hook-manager.js'][21]++;
    this.clients[client.id].push(hook);
  }
  catch (err) {
    _$jscoverage['hook-manager.js'][23]++;
    winston.warn("Failed hooking into %", hook);
  }
});
_$jscoverage['hook-manager.js'][27]++;
HookManager.prototype.remove_client = (function (client) {
  _$jscoverage['hook-manager.js'][28]++;
  if (! this.clients[client.id]) {
    _$jscoverage['hook-manager.js'][28]++;
    return;
  }
  _$jscoverage['hook-manager.js'][30]++;
  var i;
  _$jscoverage['hook-manager.js'][31]++;
  for (i = 0; i < this.clients[client.id]; i++) {
    _$jscoverage['hook-manager.js'][32]++;
    Hooks[this.clients[client.id][i].hook].remove_client(client);
}
});
_$jscoverage['hook-manager.js'][36]++;
module.exports = new HookManager();
_$jscoverage['hook-manager.js'].source = ["var winston = require('winston'),","\tQueueHook = require('./hooks/queue-hook');","","","/* All Hooks */","var Hooks = {};","Hooks.queue = new QueueHook();","","/* Hook Manager */","var HookManager = function(){","\tthis.clients = {};","};","","HookManager.prototype.io_hook = function(hook, client){","\ttry{","\t\tHooks[hook].add_client(client);","","\t\tif(!this.clients[client.id]){","\t\t\tthis.clients[client.id] = [];","\t\t}","\t\tthis.clients[client.id].push(hook);","\t}catch(err){","\t\twinston.warn('Failed hooking into %', hook);","\t}","};","","HookManager.prototype.remove_client = function(client){","\tif(!this.clients[client.id]){ return; }","","\tvar i;","\tfor(i=0; i&lt;this.clients[client.id]; i++){","\t\tHooks[this.clients[client.id][i].hook].remove_client(client);","\t}","};","","module.exports = new HookManager();"];
